import { useState, useEffect, useRef, useCallback } from 'react';
import { Html5Qrcode } from 'html5-qrcode';
import { QRCodeCanvas } from 'qrcode.react';
import { Wifi, WifiOff, Users, MessageSquare, FolderOpen, Send, QrCode, Camera, X } from 'lucide-react';
import { 
  Header,
  QRCodeDisplay,
  QRCodeScanner,
  ChatPanel,
  FilePanel,
  TabBar,
  NotConnected
} from './components';
import type { Message, Peer, ConnectionData } from './types';

const App: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'chat' | 'files'>('chat');
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const [peerId, setPeerId] = useState<string>('');
  const [peers, setPeers] = useState<Peer[]>([]);
  const [messages, setMessages] = useState<Message[]>([]);
  const [messageInput, setMessageInput] = useState<string>('');
  const [showQR, setShowQR] = useState<boolean>(false);
  const [showScanner, setShowScanner] = useState<boolean>(false);
  const [qrData, setQrData] = useState<string>('');
  const [scannedData, setScannedData] = useState<string>('');
  const [isScanning, setIsScanning] = useState<boolean>(false);
  const html5QrCodeRef = useRef<Html5Qrcode | null>(null);
  const scannerElementId = 'qr-reader';

  // Handler to close QR scanner
  const handleScannerClose = useCallback((): void => {
    if (html5QrCodeRef.current && isScanning) {
      html5QrCodeRef.current.stop()
        .then(() => {
          html5QrCodeRef.current?.clear();
          html5QrCodeRef.current = null;
        })
        .catch(console.error)
        .finally(() => {
          setIsScanning(false);
          setShowScanner(false);
        });
    } else {
      setIsScanning(false);
      setShowScanner(false);
    }
  }, [isScanning]);

  // Handler for manual connection via QR code or pasted data
  const handleManualConnect = useCallback((peerData: string): void => {
    try {
      let jsonData: string;
      
      if (peerData.startsWith('p2p://connect?data=')) {
        const url = new URL(peerData);
        const dataParam = url.searchParams.get('data');
        if (!dataParam) {
          throw new Error('Invalid URL format');
        }
        jsonData = decodeURIComponent(dataParam);
      } else {
        jsonData = peerData;
      }
      
      const data = JSON.parse(jsonData) as ConnectionData;
      if (data.type === 'p2p-connection' && data.peerId) {
        const newPeer: Peer = { 
          id: data.peerId, 
          connected: true,
          timestamp: data.timestamp
        };
        setPeers(prevPeers => [...prevPeers, newPeer]);
        setMessages(prevMessages => [...prevMessages, {
          id: Date.now(),
          text: `Connected to peer ${data.peerId}`,
          sender: 'System',
          timestamp: new Date().toLocaleTimeString()
        }]);
        handleScannerClose();
      }
    } catch (err) {
      console.error('Invalid QR data:', err);
      alert('Invalid QR code data');
    }
  }, [handleScannerClose]);

  // Handler to start QR scanner
  const startScanner = useCallback(async (): Promise<void> => {
    try {
      if (isScanning) return;
      
      setIsScanning(true);
      
      const html5QrCode = new Html5Qrcode(scannerElementId);
      html5QrCodeRef.current = html5QrCode;
      
      const config = {
        fps: 10,
        qrbox: { width: 250, height: 250 }
      };
      
      await html5QrCode.start(
        { facingMode: "environment" },
        config,
        (decodedText: string) => {
          console.log('QR Code detected:', decodedText);
          handleManualConnect(decodedText);
        },
        () => {
          // Ignore scanning errors (they happen frequently while scanning)
        }
      );
    } catch (err) {
      console.error('Error starting scanner:', err);
      alert('Could not access camera. Please check permissions.');
      handleScannerClose();
    }
  }, [handleScannerClose, handleManualConnect, isScanning]);

  // Connect/Disconnect handler
  const handleConnect = useCallback((): void => {
    setIsConnected(!isConnected);
    if (!isConnected) {
      const newPeerId = 'peer-' + Math.random().toString(36).substr(2, 9);
      setPeerId(newPeerId);
      const connectionData: ConnectionData = {
        peerId: newPeerId,
        timestamp: Date.now(),
        type: 'p2p-connection'
      };
      const encodedData = `p2p://connect?data=${encodeURIComponent(JSON.stringify(connectionData))}`;
      setQrData(encodedData);
    } else {
      setPeerId('');
      setPeers([]);
      setQrData('');
      setShowQR(false);
      handleScannerClose();
    }
  }, [isConnected, handleScannerClose]);

  // Handle pasting connection data
  const handlePasteConnect = useCallback((): void => {
    if (scannedData) {
      handleManualConnect(scannedData);
      setScannedData('');
    }
  }, [scannedData, handleManualConnect]);

  // Toggle scanner
  const handleScannerToggle = useCallback((): void => {
    if (showScanner) {
      handleScannerClose();
    } else {
      setShowScanner(true);
      startScanner().catch(console.error);
    }
  }, [handleScannerClose, showScanner, startScanner]);

  // Message handlers
  const handleSendMessage = useCallback((): void => {
    if (messageInput.trim() && isConnected) {
      setMessages(prevMessages => [...prevMessages, {
        id: Date.now(),
        text: messageInput,
        sender: 'You',
        timestamp: new Date().toLocaleTimeString()
      }]);
      setMessageInput('');
    }
  }, [messageInput, isConnected]);

  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLInputElement>): void => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  }, [handleSendMessage]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      handleScannerClose();
    };
  }, [handleScannerClose]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
      <div className="container mx-auto px-4 py-8">
        <div className="bg-slate-800/50 backdrop-blur-lg rounded-2xl shadow-2xl border border-slate-700/50 mb-6 p-6">
          <Header isConnected={isConnected} onConnect={handleConnect} />
          
          {isConnected && (
            <QRCodeDisplay
              peerId={peerId}
              qrData={qrData}
              showQR={showQR}
              showScanner={showScanner}
              scannedData={scannedData}
              onShowQRToggle={() => setShowQR(!showQR)}
              onScannerToggle={handleScannerToggle}
              onScannedDataChange={setScannedData}
              onPasteConnect={handlePasteConnect}
              peersCount={peers.length}
            />
          )}
        </div>

        <div className="bg-slate-800/50 backdrop-blur-lg rounded-2xl shadow-2xl border border-slate-700/50 overflow-hidden">
          <TabBar activeTab={activeTab} onTabChange={setActiveTab} />

          <div className="p-6">
            {!isConnected ? (
              <NotConnected />
            ) : activeTab === 'chat' ? (
              <ChatPanel
                messages={messages}
                messageInput={messageInput}
                onMessageInputChange={setMessageInput}
                onSendMessage={handleSendMessage}
                onKeyPress={handleKeyPress}
              />
            ) : (
              <FilePanel />
            )}
          </div>
        </div>

        {showScanner && (
          <QRCodeScanner
            isScanning={isScanning}
            onClose={handleScannerClose}
            onScan={handleManualConnect}
            scannerElementId={scannerElementId}
          />
        )}

        <div className="mt-6 text-center text-slate-400 text-sm">
          <p>Ready to integrate WebRTC, WebSocket, or libp2p for P2P connectivity</p>
        </div>
      </div>
    </div>
  );
};

export default App;
